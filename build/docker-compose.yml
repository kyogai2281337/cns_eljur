services:
  nginx:
    build:
      context: ../
      dockerfile: build/nginx/Dockerfile
    ports:
      - "80:80"
    depends_on:
      - auth
      - admin
  auth:
    build:
      context: ../
      dockerfile: build/auth/Dockerfile
    depends_on:
      db:
        condition: service_started
      nats:
        condition: service_started
    deploy:
      replicas: 1
  sch_controller:
    build:
      context: ../
      dockerfile: build/controller/Dockerfile
    # image: cns_auth  # 6987 basically
    restart: always
    depends_on:
      db:
        condition: service_started
      nats:
        condition: service_started
    deploy:
      replicas: 1
  admin:
    build:
      context: ../
      dockerfile: build/admin/Dockerfile
    # image: cns_auth  # 6987 basically
    restart: always
    depends_on:
      db:
        condition: service_started
      nats:
        condition: service_started
    deploy:
      replicas: 1
  redis:
    image: redis # 6379 basically
    restart: always
  db:
    build:
      context: ./db
      args:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"
  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
  nats:
    image: nats
    restart: always
  mongo:
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MYSQL_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MYSQL_PASSWORD}
  mongo-express:
    image: mongo-express:latest
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://${MYSQL_USER}:${MYSQL_PASSWORD}@mongo:27017/
      ME_CONFIG_BASICAUTH: false
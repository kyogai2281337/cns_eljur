# --- Стадия 1: Сборка WebAssembly с использованием Go ---
FROM golang:1.23 AS builder

# Устанавливаем рабочую директорию
WORKDIR /build
    
# Копируем Go-модули и устанавливаем зависимости
COPY frontend/dmphctrl_frontend/src/wasm/go.mod frontend/dmphctrl_frontend/src/wasm/go.sum ./
RUN go mod download
    
# Копируем исходный код приложения
COPY frontend/dmphctrl_frontend/src/wasm/. .

# Компилируем в WebAssembly
RUN GOOS=js GOARCH=wasm go build -o basic.wasm ./cmd/basic/main.go
RUN GOOS=js GOARCH=wasm go build -o rtcp.wasm ./cmd/rtcp/main.go


    
# --- Стадия 2: Подготовка контейнера для запуска приложения ---
FROM node:latest as src_creator
WORKDIR /app

# Копируем файлы package.json и package-lock.json и устанавливаем зависимости
COPY frontend/dmphctrl_frontend/package*.json ./
RUN npm install

# Копируем остальные файлы и создаем сборку
COPY ./frontend/dmphctrl_frontend .
RUN npm run build

# Стадия 3: Конфигурация и запуск
FROM nginx:alpine AS production
    
# Устанавливаем рабочую директорию
WORKDIR /usr/share/nginx/html
    
# Копируем скомпилированный WebAssembly файл
COPY --from=builder /build src/wasm/
    
# Копируем файл wasm_exec.js
COPY --from=builder /usr/local/go/misc/wasm/wasm_exec.js ./src/js/

COPY --from=src_creator app/src/js/wasm_init.js ./src/js/
COPY --from=src_creator app/src/js/wasm_rtc.js ./src/js/


# Копируем файл HTML и конфиг Nginx
COPY --from=src_creator app/dist /usr/share/nginx/html/
COPY build/nginx/nginx.conf /etc/nginx/conf.d/default.conf
        
# Экспонируем порт 80
EXPOSE 80
# Запускаем Nginx
CMD ["nginx", "-g", "daemon off;"]
    